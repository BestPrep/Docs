{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to BestPrep's Salesforce Documentation","text":"<p>This site is your central hub for understanding how BestPrep uses Salesforce to manage mentoring programs, communications, student connections, and reporting.</p> <p>Whether you're a program manager, support staff, developer, or occasional admin, you'll find everything here you need to work confidently within our Salesforce system.</p>"},{"location":"#purpose-of-this-site","title":"Purpose of This Site","text":"<ul> <li>Provide clear documentation on how our custom Salesforce setup works</li> <li>Share step-by-step guides for common tasks and internal tools</li> <li>Centralize reference material for fields, objects, flows, and automations</li> <li>Help new staff get oriented quickly with onboarding resources</li> </ul>"},{"location":"#structure-of-our-salesforce-system","title":"Structure of Our Salesforce System","text":"<p>BestPrep\u2019s Salesforce environment supports programs like:</p> <ul> <li>eMentors</li> <li>Cloud Coach</li> <li>Stock Market Game</li> <li>Volunteer Management</li> <li>Donor and Sponsor Tracking</li> </ul> <p>Each program is built around custom objects, flows, and automations tailored to our unique needs. This site explains what each component does \u2014 and how to safely make changes.</p>"},{"location":"#what-youll-find-here","title":"What You\u2019ll Find Here","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Overview of key objects and relationships</li> <li>Logging in, navigating, and searching</li> <li>Understanding our custom record types</li> </ul>"},{"location":"#program-specific-guides","title":"Program-Specific Guides","text":"<ul> <li>Messaging flow (eMentors &amp; Cloud Coach)</li> <li>Teacher and mentor portals</li> <li>Managing weekly guiding questions</li> </ul>"},{"location":"#admin-dev-docs","title":"Admin + Dev Docs","text":"<ul> <li>Field reference by object</li> <li>Apex classes and triggers</li> <li>Flow logic and scheduled jobs</li> <li>Change log and deployment tips</li> </ul>"},{"location":"#common-entry-points","title":"Common Entry Points","text":"<ul> <li>Messaging Process Overview</li> </ul>"},{"location":"#need-help","title":"Need Help?","text":"<p>For questions about this portal or to suggest edits, contact Tovin Sannes-Venhuizen or email <code>tsannes-venhuizen@bestprep.org</code>.</p>"},{"location":"mentoring/apex/","title":"What is Apex","text":"<p>Apex is a programming language developed by Salesforce that lets developers write custom business logic directly on the Salesforce platform.</p> <p>It is:</p> <ul> <li>Strongly typed (like Java)</li> <li>Object-oriented</li> <li>Hosted and executed entirely in the Salesforce cloud</li> </ul> <p>Apex allows you to:</p> <ul> <li>Create custom triggers that run before or after record changes (like INSERT, UPDATE, DELETE)</li> <li>Write classes and methods to automate processes, enforce rules, or integrate with external systems</li> <li>Call APIs, perform complex logic, or build reusable tools that work across your org</li> </ul>"},{"location":"mentoring/apex/#when-is-apex-used","title":"When Is Apex Used?","text":"<p>You use Apex when point-and-click tools like Flows, Process Builder, or Validation Rules aren\u2019t enough.</p>"},{"location":"mentoring/apex/#common-examples","title":"Common examples:","text":"<ul> <li>Automatically create child records when a parent is inserted</li> <li>Update related objects across lookups</li> <li>Schedule jobs or run batch operations on thousands of records</li> <li>Build Lightning Web Components (LWCs) that fetch or modify Salesforce data</li> </ul> <p>That last use case (Building LWCs) is what we primarily use Apex for in the mentoring project.</p>"},{"location":"mentoring/mentoring/","title":"Welcome to the BestPrep Mentoring Portals Documentation","text":"<p>This site documents the custom-built Mentor and Student portals that support BestPrep\u2019s eMentors and Cloud Coach programs. Both portals are powered by a shared Salesforce backend and Lightning Web Components (LWC), with custom Apex, JavaScript, and Flow logic.</p> <p>Use this site to understand the technical design, program logic, and how these tools work together to deliver a seamless mentoring experience.</p>"},{"location":"mentoring/mentoring/#purpose","title":"Purpose","text":"<ul> <li>Provide clear technical documentation for the Mentor Portal, Student Portal, and Overview Portal</li> <li>Explain how both eMentors and Cloud Coach are supported within the same codebase</li> <li>Document Apex classes, JS modules, and LWC components behind each interface</li> <li>Help developers safely extend or troubleshoot the mentoring system</li> </ul>"},{"location":"mentoring/mentoring/#portal-overview","title":"Portal Overview","text":"<p>The mentoring system consists of 3 major public-facing portals:</p> Portal Description Mentor Portal Used by mentors to send weekly messages, view student responses, and manage availability Student Portal Used by students to read guiding questions, mentor responses, and submit messages Overview Portal Used by teachers to view weekly connection progress across all students <p>Each portal dynamically loads based on a secure URL with a passkey and connection ID. All data is sourced from custom Salesforce objects and records.</p>"},{"location":"mentoring/mentoring/#explore-the-code-and-design","title":"Explore the Code and Design","text":""},{"location":"mentoring/mentoring/#mentor-portal","title":"Mentor Portal","text":"<ul> <li>Mentor Portal Overview</li> <li>Mentor Portal Apex</li> <li>Mentor Portal JS &amp; LWC</li> </ul>"},{"location":"mentoring/mentoring/#need-help","title":"Need Help?","text":"<p>For questions about this portal or to suggest edits, contact Tovin Sannes-Venhuizen or email <code>tsannes-venhuizen@bestprep.org</code>.</p>"},{"location":"mentoring/reports/","title":"Reports","text":"<p>There are multiple reports available for staff use in the mentoring program. Linked below are some of the more commonly used reports. The most common are the flagged message reports. You can find a Salesforce report folder with all of our mentoring reports by clicking this link.</p>"},{"location":"mentoring/reports/#flagged-message-reports","title":"Flagged Message Reports","text":"<p>When a message is submitted, it passes through our </p>"},{"location":"mentoring/reports/#my-flagged-messages","title":"My Flagged Messages","text":"<p>The \"My Flagged Messages\" report shows you all messages for active eMentors &amp; Cloud Coach cases where you are the case owner. If you are looking for flagged messages for a particular user, you will click the filter icon (it looks like a funnel in the top right hand corner) </p> <p></p>"},{"location":"mentoring/reports/#all-flagged-messages","title":"All Flagged Messages","text":"<p>If just seeing a single users flagged messages is not enough, or you want to check on all flagged messages in the system, you can do so with the report \"All Flagged Messages.\" This contains all messages that are flagged for both Cloud Coach and eMentors in our Salesforce system for all time. This report should be entirely empty in the summer. </p>"},{"location":"mentoring/email_system/notification_email/","title":"Notification Email","text":"<p>Whenever a mentor or student recieves a new message, they get an email alert. This is done using two parts - a flow and a lightning email template. </p>"},{"location":"mentoring/email_system/notification_email/#mentoring-new-message-notification","title":"Mentoring - New Message Notification","text":"<p>The flow Mentoring - New Message Notification is laid out in the following method.</p>   graph TD   N2[Record Triggered Flow] --&gt; N3[Get Recipient Email]   N3 --&gt; N4[Decide: Mentor or Student]   N4 --&gt;|Mentor Wrote| N5[Send Email to Student]   N4 --&gt;|Student Wrote| N6[Send Email to Mentor]   N5 --&gt; N7[End Flow]   N6 --&gt; N8[End Flow]   N2 --&gt;|Error| N9[If An Error Happens]    class N2 click-step-N2;   class N3 click-step-N3;   class N4 click-step-N4;   class N5 click-step-N5;   class N6 click-step-N6;   class N9 click-step-N9;    classDef clickable stroke:#333,stroke-width:2px;   class N2,N3,N4,N5,N6,N9 clickable;"},{"location":"mentoring/email_system/notification_email/#lightning-email-template","title":"Lightning Email Template","text":"<p>There are two lightning email templates used for new message notifications, both created with the website BeeFree.io and then copy and pasted into the lightning email editor after some minor changes. Both email templates are set up to relate to a Message__c record, meaning we can pull merge fields from the message record. This is done with three sets of curly brackets on each side - {{{Like This}}}</p> <p>You can view all of the Mentoring Email Templates inside this folder. </p> <p>Before being merged, the email templates look plain and broken - however, the merge fields will be filled with data later during the flow. We have three merge fields. They may look confusing or duplicate at first, but it makes sense when broken down: Record.Field. The first part is telling the email template what record to look in (the recipient or the message) and the second part is telling it what field to pull data from. So, Message__c.Message__c is saying look inside the Message record and pull the Message field. Remember, the __c just means that it is a custom object, and not something that Salesforce built into their system by default. </p> <ul> <li>{{{Recipient.Familiar_Name__c}}}</li> <li>{{{Message__c.Mentor_Portal_Link__c}}}</li> <li>{{{Message__c.Message__c}}} </li> </ul> <p>All images in the mentoring email templates must be static direct URL type images that are publicly available to be loaded in most email clients (Outlook, Gmail, Yahoo). This means that you cannot use an image in SharePoint or Google Drive (many of our partners have these domains blocked). Best practices for our organization currently is to upload the image as an asset to WordPress and then use the wordpress image URL in the email template - usually in the format of bestprep.org/wp-content/uploads/YYYY/MM/filename.jpg.</p> <p></p> <p>You can view the notification emails below, or read about the weekly emails here.</p> <ul> <li>Mentoring - New Student Message</li> <li>Mentoring - New Mentor Message</li> </ul> \u00d7 Record Triggered Flow <p>When the record is triggered, it works like this: Whenever the object Message__c is updated TO meet the condition from previously not having met the condition, execute the following flow. The condition in this case is whenever Filter_Status__c is changed from being anything else to \"Pass\" - then execute this flow.This ensures that no one gets a message that was still flagged or being reviewed. Additionally, it only runs AFTER the record has been saved, to avoid any accidental mis-clicks.</p> \u00d7 Get Connection Data <p>Once the record has been triggered, our first action is to get the data of the connection that owns the message which was just passed.We do this by finding the Record ID of the connection that owns the message, and then pulling all the data from the connection that has a matching Record ID.We then sort by most recent and only return the first. This shouldn't ever actually be neccesary but is best practice to include.</p> \u00d7 Mentor or Student <p>We use a simple logic statement to decide if the message was from a mentor or a student.If the message was from a mentor, we continue down the \"Send Email to Student\" path. If the message was from a student, we continue down the \"Send Email to Mentor\" path.This is checked using Role__c of the triggering Message__c record.</p> \u00d7 Send Email to Student <p>In this step, we have already decided that a mentor wrote a message, and we want to alert the student. We fill in a few fields in our action that allows us to do this.We send from an organization wide email address (currently ementors@bestprep.org) which has been configured in settings.We use our email template created for this step (Mentoring - New Mentor Message) and also put in both our related record ID and recipient record. The related record is a Message__c object (setup in the lightning email template) and we use the triggering Message__c record. Our recipient is a little more complicated, as this always must be a contact or a lead record - so we go through the Message__c to the Connection__c, then into the student BestPrep_Program_Participation__c, and finally into the Contact where we get Contact Id. This is the recipient record that we will use.</p> \u00d7 Send Email to Mentor <p>In this step, we have already decided that a student wrote a message, and we want to alert the mentor. We fill in a few fields in our action that allows us to do this.We send from an organization wide email address (currently ementors@bestprep.org) which has been configured in settings.We use our email template created for this step (Mentoring - New Student Message) and also put in both our related record ID and recipient record. The related record is a Message__c object (setup in the lightning email template) and we use the triggering Message__c record. Our recipient is a little more complicated, as this always must be a contact or a lead record - so we go through the Message__c to the Connection__c, then into the mentor BestPrep_Program_Participation__c, and finally into the Contact where we get Contact Id. This is the recipient record that we will use.</p> \u00d7 Uh-oh... there was an error. <p>If for any reason an error should occur, Salesforce will not allow any user to pass a message while the error is happening.</p>"},{"location":"mentoring/email_system/weekly_email/","title":"Weekly Email","text":"<p>Once a week, each mentor and student will recieve an email from BestPrep. </p>"},{"location":"mentoring/flagging_system/flagging_code/","title":"Flagging Code","text":""},{"location":"mentoring/flagging_system/flagging_system/","title":"Message Flagging System","text":"<p>The message flagging system is put in place to protect mentors, students, and BestPrep from both safety concerns and potential liability. This system checks for the following: </p> <ul> <li>Flagged Words</li> <li>Links</li> <li>Attachments &amp; Files</li> </ul>"},{"location":"mentoring/flagging_system/flagging_system/#life-of-a-message","title":"Life of a Message","text":"<p>When a message is submitted to our system in any way (via the portal or manually by a BestPrep staff member) it goes through the following process. </p>  flowchart TD   A[Start] --&gt; B{Decision}   B --&gt;|Yes| C[Do it]   B --&gt;|No| D[Cancel]"},{"location":"mentoring/flagging_system/making_updates/","title":"Making Updates","text":"<p>If you need to update the flagging system, there are things can be easily changed by anyone, and parts that need an admin's help. </p> <p>Anyone can:</p> <ul> <li>Add new flagged terms</li> <li>Remove old flagged terms</li> </ul> <p>Only an admin can:</p> <ul> <li>Change frequency of flagging checks</li> <li>Change how messages are checked for flagged terms</li> </ul>"},{"location":"mentoring/mentor_portal/mentor_apex/","title":"Mentoring Sites - Apex Code","text":"<p>The Apex code file is what gives our JavaScript files the information they need. MentoringMentorPortal.cls is the primary file, but it also uses a helper class for submitting files.</p>"},{"location":"mentoring/mentor_portal/mentor_apex/#mentoringmentorportalcls","title":"MentoringMentorPortal.cls","text":"<p>MentoringMentorPortal.cls is the primary file that runs the back-end of the mentor portal. </p> <pre><code>global without sharing class MentoringMentorPortal {\n\n    @AuraEnabled\n    public static Map&lt;String, Object&gt; getConnectionData(Id connectionId, String passkey) {\n        Connection__c conn = [\n            SELECT Id, Connection_Passkey__c, Connection_Type__c, Mentor_Out_of_Office__c,\n                   Student_Familiar_Name__c, Mentor_Familiar_Name__c, Mentor_Full_Name__c,\n                   Track__c, Mentor_VAF_Date__c, Mentor_Email__c,\n                   Case__r.Id,\n                   Case__r.Owner.Email,\n                   Case__r.ParentId,\n                   Case__r.Assigned_Company__r.Preferred_Recognition__c,\n                   Case__r.Assigned_School__r.Preferred_Recognition__c,\n                   Case__r.Celebration_Date__c,\n                   Case__r.Celebration_Start_Time__c,\n                   Case__r.Celebration_End_Time__c,\n                   Case__r.Meet_And_Greet_Location_Address__c,\n                   Case__r.CC_Date_1__c, Case__r.CC_Date_2__c, Case__r.CC_Date_3__c, Case__r.CC_Date_4__c,\n                   Case__r.CC_Date_5__c, Case__r.CC_Date_6__c, Case__r.CC_Date_7__c, Case__r.CC_Date_8__c,\n                   Case__r.GQ_1__r.Name, Case__r.GQ_1__r.Mentor_Talking_Points__c, Case__r.GQ_1__r.Enable_Attachments__c,\n                   Case__r.GQ_2__r.Name, Case__r.GQ_2__r.Mentor_Talking_Points__c, Case__r.GQ_2__r.Enable_Attachments__c,\n                   Case__r.GQ_3__r.Name, Case__r.GQ_3__r.Mentor_Talking_Points__c, Case__r.GQ_3__r.Enable_Attachments__c,\n                   Case__r.GQ_4__r.Name, Case__r.GQ_4__r.Mentor_Talking_Points__c, Case__r.GQ_4__r.Enable_Attachments__c,\n                   Case__r.GQ_5__r.Name, Case__r.GQ_5__r.Mentor_Talking_Points__c, Case__r.GQ_5__r.Enable_Attachments__c,\n                   Case__r.GQ_6__r.Name, Case__r.GQ_6__r.Mentor_Talking_Points__c, Case__r.GQ_6__r.Enable_Attachments__c,\n                   Case__r.GQ_7__r.Name, Case__r.GQ_7__r.Mentor_Talking_Points__c, Case__r.GQ_7__r.Enable_Attachments__c,\n                   Case__r.Activity_GQ__r.Name, Case__r.Activity_GQ__r.Mentor_Talking_Points__c, Case__r.Activity_GQ__r.Enable_Attachments__c\n            FROM Connection__c\n            WHERE Id = :connectionId\n            LIMIT 1\n        ];\n\n        if (conn.Connection_Passkey__c != passkey) {\n            throw new AuraHandledException('Invalid Passkey');\n        }\n\n        // Determine which Case to use for coordinator query\n        Id coordinatorCaseId = conn.Connection_Type__c == 'Cloud Coach'\n            ? conn.Case__r.ParentId\n            : conn.Case__c;\n\n        // Get all coordinators for that Case\n        List&lt;BestPrep_Program_Participation__c&gt; coordinatorRecords = [\n            SELECT Role__c, Contact__r.Email\n            FROM BestPrep_Program_Participation__c\n            WHERE Case_Number__c = :coordinatorCaseId\n            AND Role__c = 'Company Coordinator'\n        ];\n\n        // Extract just the email addresses\n        List&lt;String&gt; coordinatorEmails = new List&lt;String&gt;();\n        for (BestPrep_Program_Participation__c bppp : coordinatorRecords) {\n            if (bppp.Contact__r.Email != null) {\n                coordinatorEmails.add(bppp.Contact__r.Email);\n            }\n        }\n\n        // Get messages\n        List&lt;Message__c&gt; messages = [\n            SELECT Id, Week__c, Role__c, Message__c, Filter_Status__c, CreatedDate, Link_to_File_Attached__c\n            FROM Message__c\n            WHERE Connection__c = :connectionId\n        ];\n\n        // Prepare talking points\n        Map&lt;String, Object&gt; talkingPoints = new Map&lt;String, Object&gt;{\n            'Week 1' =&gt; buildTP('Week 1', conn.Case__r.CC_Date_1__c, conn.Case__r.GQ_1__r),\n            'Week 2' =&gt; buildTP('Week 2', conn.Case__r.CC_Date_2__c, conn.Case__r.GQ_2__r),\n            'Week 3' =&gt; buildTP('Week 3', conn.Case__r.CC_Date_3__c, conn.Case__r.GQ_3__r),\n            'Week 4' =&gt; buildTP('Week 4', conn.Case__r.CC_Date_4__c, conn.Case__r.GQ_4__r),\n            'Week 5' =&gt; buildTP('Week 5', conn.Case__r.CC_Date_5__c, conn.Case__r.GQ_5__r),\n            'Week 6' =&gt; buildTP('Week 6', conn.Case__r.CC_Date_6__c, conn.Case__r.GQ_6__r),\n            'Week 7' =&gt; buildTP('Week 7', conn.Case__r.CC_Date_7__c, conn.Case__r.GQ_7__r),\n            'Week 8' =&gt; buildTP('Week 8', conn.Case__r.CC_Date_8__c, conn.Case__r.Activity_GQ__r)\n        };\n\n        return new Map&lt;String, Object&gt;{\n            'connection' =&gt; conn,\n            'messages' =&gt; messages,\n            'talkingPoints' =&gt; talkingPoints,\n            'companyCoordinators' =&gt; coordinatorEmails\n        };\n    }\n\n    private static Map&lt;String, Object&gt; buildTP(String week, Date d, eMentors_GQ__c gq) {\n        if (gq == null) {\n            return new Map&lt;String, Object&gt;{\n                'week' =&gt; week,\n                'dueDate' =&gt; '',\n                'title' =&gt; 'No topic for this week.',\n                'talkingPoints' =&gt; ''\n            };\n        }\n\n        return new Map&lt;String, Object&gt;{\n            'week' =&gt; week,\n            'dueDate' =&gt; d != null ? d.format() : '',\n            'title' =&gt; gq.Name,\n            'talkingPoints' =&gt; gq.Mentor_Talking_Points__c,\n            'enableAttachments' =&gt; gq.Enable_Attachments__c\n        };\n    }\n\n\n\n    @AuraEnabled\n    public static void upsertMentorMessage(Id connectionId, String week, String messageBody, String passkey) {\n        upsertMessage(connectionId, week, 'Mentor', messageBody, passkey);\n    }\n\n    private static void upsertMessage(Id connectionId, String week, String role, String messageBody, String passkey) {\n        Connection__c conn = [\n            SELECT Id, Connection_Passkey__c\n            FROM Connection__c\n            WHERE Id = :connectionId\n        ];\n\n        if (conn.Connection_Passkey__c != passkey) {\n            throw new AuraHandledException('Invalid credentials');\n        }\n\n        Message__c msg;\n        List&lt;Message__c&gt; existing = [\n            SELECT Id\n            FROM Message__c\n            WHERE Connection__c = :connectionId AND Week__c = :week AND Role__c = :role\n        ];\n        if (!existing.isEmpty()) {\n            msg = existing[0];\n            msg.Message__c = messageBody;\n            msg.Filter_Status__c = 'Flag - New';\n            update msg;\n        } else {\n            msg = new Message__c(\n                Connection__c = connectionId,\n            Week__c = week,\n            Role__c = role,\n            Message__c = messageBody,\n            Filter_Status__c = 'Flag - New',\n            OwnerId = UserInfo.getUserId()\n                );\n            insert msg;\n        }\n    }\n\n    @AuraEnabled\n    public static void upsertMentorMessageWithFile(\n        Id connectionId,\n    String week,\n    String messageBody,\n    String passkey,\n    String fileName,\n    String base64FileContent\n    ) {\n        // Validate connection credentials\n        Connection__c conn = [\n        SELECT Id, Connection_Passkey__c\n        FROM Connection__c\n        WHERE Id = :connectionId\n    ];\n\n        if (conn.Connection_Passkey__c != passkey) {\n            throw new AuraHandledException('Invalid credentials');\n        }\n\n        // Upsert the mentor's message\n        Message__c msg;\n        List&lt;Message__c&gt; existing = [\n        SELECT Id\n        FROM Message__c\n        WHERE Connection__c = :connectionId AND Week__c = :week AND Role__c = 'Mentor'\n    ];\n        if (!existing.isEmpty()) {\n            msg = existing[0];\n            msg.Message__c = messageBody;\n            msg.Filter_Status__c = 'Flag - New';\n            update msg;\n        } else {\n            msg = new Message__c(\n                Connection__c = connectionId,\n            Week__c = week,\n            Role__c = 'Mentor',\n            Message__c = messageBody,\n            Filter_Status__c = 'Flag - New'\n                //,OwnerId = UserInfo.getUserId()\n            );\n            insert msg;\n        }\n\n        // Upload and link file (if provided)\n        if (!String.isBlank(fileName) &amp;&amp; !String.isBlank(base64FileContent)) {\n            ContentVersion cv = new ContentVersion(\n                Title = fileName,\n            PathOnClient = fileName,\n            VersionData = EncodingUtil.base64Decode(base64FileContent)\n                );\n            insert cv;\n\n            ContentVersion inserted = [\n            SELECT Id, ContentDocumentId\n            FROM ContentVersion\n            WHERE Id = :cv.Id\n        ];\n\n            insert new ContentDocumentLink(\n                ContentDocumentId = inserted.ContentDocumentId,\n            LinkedEntityId = msg.Id,\n            ShareType = 'V',\n            Visibility = 'AllUsers'\n                );\n\n            System.enqueueJob(new FileAttachQueueable(msg.Id));\n        }\n\n    }\n\n    @AuraEnabled\n    public static void updateOutOfOfficeWeeks(Id connectionId, String passkey, String weeks, String track) {\n        Connection__c conn = [\n        SELECT Id, Connection_Passkey__c\n        FROM Connection__c\n        WHERE Id = :connectionId\n    ];\n\n        if (conn.Connection_Passkey__c != passkey) {\n            throw new AuraHandledException('Invalid credentials');\n        }\n\n        conn.Mentor_Out_of_Office__c = weeks;\n        conn.Track__c = track;\n        update conn;\n    }\n\n\n\n    @AuraEnabled\n    public static void submitVolunteerAgreement(Id connectionId, String passkey, String pronouns, String ethnicity) {\n        Connection__c conn = [\n            SELECT Id, Connection_Passkey__c, Mentor_BPPP__r.Contact__c\n            FROM Connection__c\n            WHERE Id = :connectionId\n        ];\n\n        if (conn.Connection_Passkey__c != passkey) {\n            throw new AuraHandledException('Invalid credentials');\n        }\n\n        Id contactId = conn.Mentor_BPPP__r.Contact__c;\n        if (contactId == null) {\n            throw new AuraHandledException('Mentor contact not found.');\n        }\n\n        Contact c = [SELECT Id FROM Contact WHERE Id = :contactId];\n        c.Pronouns__c = pronouns;\n        c.Ethnicity__c = ethnicity;\n        c.Volunteer_Agreement_Date__c = Date.today();\n        update c;\n    }\n}\n</code></pre>"},{"location":"mentoring/mentor_portal/mentor_apex/#fileattachqueueablecls","title":"FileAttachQueueable.cls","text":"<p>FileAttachQueueable.cls is a secondary helper that only helps with message and file submission.</p> <pre><code>public class FileAttachQueueable implements Queueable {\n\n    private Id msgId;\n\n    public FileAttachQueueable(Id msgId) {\n        this.msgId = msgId;\n    }\n\n    public void execute(QueueableContext context) {\n        try {\n            Message__c msg = [SELECT Id FROM Message__c WHERE Id = :msgId LIMIT 1];\n            msg.Link_to_File_Attached__c = 'Attachment Processing';\n            update msg;\n        } catch (Exception e) {\n            System.debug('FileAttachQueueable failed: ' + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"mentoring/mentor_portal/mentor_apex/#metadata","title":"Metadata","text":"<p>Each file needs its own separate metadata file as well. However, they are identical other than the naming. </p> <p>MentoringMentorPortal.cls-meta.xml</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ApexClass xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;apiVersion&gt;63.0&lt;/apiVersion&gt;\n    &lt;status&gt;Active&lt;/status&gt;\n&lt;/ApexClass&gt;\n</code></pre> <p>FileAttachQueueable.cls-meta.xml</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ApexClass xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;apiVersion&gt;63.0&lt;/apiVersion&gt;\n    &lt;status&gt;Active&lt;/status&gt;\n&lt;/ApexClass&gt;\n</code></pre>"},{"location":"mentoring/mentor_portal/mentor_js/","title":"Mentoring Sites - JavaScript","text":"<p>The JavaScript (called js) is what allows the part of the website we see (the html) to talk to the data we got from Salesforce (the apex code). Below is the code for the mentor portal:</p>"},{"location":"mentoring/mentor_portal/mentor_js/#mentorportaljs","title":"mentorPortal.js","text":"<pre><code>import { LightningElement, track, wire } from 'lwc';\nimport { CurrentPageReference } from 'lightning/navigation';\nimport MentoringEasterEgg from '@salesforce/resourceUrl/MentoringEasterEgg';\nimport getConnectionData from '@salesforce/apex/MentoringMentorPortal.getConnectionData';\nimport upsertMentorMessageWithFile from '@salesforce/apex/MentoringMentorPortal.upsertMentorMessageWithFile';\nimport submitVolunteerAgreement from '@salesforce/apex/MentoringMentorPortal.submitVolunteerAgreement';\nimport updateOutOfOfficeWeeks from '@salesforce/apex/MentoringMentorPortal.updateOutOfOfficeWeeks';\n\n\n\nexport default class StudentPortal extends LightningElement {\n  @track isEasterEggVisible = false;\n  @track svgUrl;\n  @track isLoading = true;\n  @track accessDenied = true;\n  @track connectionId;\n  @track pw;\n  @track mentorName = '';\n  @track mentorEmail = '';\n  @track companyName = '';\n  @track weekList = [];\n  @track currentOutOfOffice = [];\n  @track isSettingsOpen = false;\n  @track connectionData = {};\n  @track talkingPoints = {};\n  @track allMessages = [];\n  @track selectedTrack = 'Track 2';\n  @track trackDescription = 'Track 2 is the default track - it will work well for most students.';\n  @track selectedWeek = 'VAF';\n  @track messageBody = '';\n  @track statusMsg = '';\n  @track isInfoOpen = false;\n  @track infoData = {};\n  @track mapMarkers = [];\n  @track mentorResourcesUrl = '';\n  @track trainingVideoUrl = '';\n  @track googleCalUrl = '';\n  @track outlookCalUrl = '';\n  @track bestPrepMailto = '';\n  @track companyCoordMailto = '';\n  @track modalStatusMsg = '';\n  @track vafForm = {\n    pronouns: [],\n    ethnicity: '',\n    agreements: {},\n  };\n  @track vafDateValid = null;\n  @track selectedFile;\n  @track attachmentEnabled = false;\n\n  weekOptions = [\n    { label: 'VAF', value: 'VAF' },\n    { label: 'Week 1', value: 'Week 1' },\n    { label: 'Week 2', value: 'Week 2' },\n    { label: 'Week 3', value: 'Week 3' },\n    { label: 'Week 4', value: 'Week 4' },\n    { label: 'Week 5', value: 'Week 5' },\n    { label: 'Week 6', value: 'Week 6' },\n    { label: 'Week 7', value: 'Week 7' },\n    { label: 'Week 8', value: 'Week 8' },\n    { label: 'Survey', value: 'Survey' }\n  ];\n\n  @wire(CurrentPageReference)\n  async getStateParams(pageRef) {\n    const today = new Date();\n    if (!pageRef?.state?.connectionId || !pageRef?.state?.passkey) return;\n    this.connectionId = pageRef.state.connectionId;\n    this.pw = pageRef.state.passkey;\n\n    try {\n      const result = await getConnectionData({\n        connectionId: this.connectionId,\n        passkey: this.pw\n      });\n\n      this.connectionData = result.connection;\n      this.talkingPoints = result.talkingPoints || {};\n      this.allMessages = result.messages;\n      this.isLoading = false;\n      this.accessDenied = false;\n\n      const fiscalYearStart = today.getMonth() &gt;= 8 ? new Date(today.getFullYear(), 8, 1) : new Date(today.getFullYear() - 1, 8, 1);\n      const fiscalYearEnd = new Date(fiscalYearStart.getFullYear() + 1, 7, 31);\n      const rawVafDate = this.connectionData?.Mentor_VAF_Date__c;\n      const vafDate = rawVafDate ? new Date(rawVafDate) : null;\n      this.vafDateValid = !!(vafDate &amp;&amp; vafDate &gt;= fiscalYearStart &amp;&amp; vafDate &lt;= fiscalYearEnd);\n      this.selectedWeek = this.vafDateValid ? 'Week 1' : 'VAF';\n\n      this.weekOptions = [{\n        label: 'VAF',\n        value: 'VAF',\n        cssClass: this.vafDateValid ? 'sidebar-item disabled' : 'sidebar-item'\n      }];\n\n      if (this.vafDateValid) {\n        for (let i = 1; i &lt;= 8; i++) {\n          const key = `Week ${i}`;\n          const tp = this.talkingPoints[key];\n          if (tp &amp;&amp; tp.talkingPoints) {\n            const isOverdue = this.isWeekOverdue(key);\n            this.weekOptions.push({\n              label: key,\n              value: key,\n              cssClass: 'sidebar-item',\n              isOverdue\n            });\n          }\n        }\n      }\n\n      this.attachmentEnabled = this.talkingPoints[this.selectedWeek]?.enableAttachments || false;\n\n      this.weekOptions.push({\n        label: 'Survey',\n        value: 'Survey',\n        cssClass: 'sidebar-item'\n      });\n\n    } catch (e) {\n      console.error('Connection error:', e);\n      this.isLoading = false;\n      this.accessDenied = true;\n    }\n  }\n\n  connectedCallback() {\n\n    this.svgUrl = MentoringEasterEgg;\n\n    const params = new URLSearchParams(window.location.search);\n    if (params.get('easteregg') === 'true') {\n      this.isEasterEggVisible = true;\n\n      setTimeout(() =&gt; {\n        this.isEasterEggVisible = false;\n      }, 30000);\n    }\n\n\n  }\n\n  renderedCallback() {\n    if (this.accessDenied || !this.connectionData?.Id || typeof this.vafDateValid !== 'boolean') return;\n    const msgBox = this.template.querySelector('[data-id=\"mentorMsg\"]');\n    if (msgBox &amp;&amp; this.mentorMessage) msgBox.innerHTML = this.mentorMessage;\n\n    this.template.querySelectorAll('.sidebar-item').forEach(el =&gt; {\n      const weekVal = el.dataset.week;\n      el.classList.toggle('active-week', weekVal === this.selectedWeek);\n    });\n  }\n\n  handleWeekClick(event) {\n    const el = event.currentTarget;\n    if (el.classList.contains('disabled')) return;\n\n    const selected = el.dataset.week;\n    this.selectedWeek = selected;\n    this.statusMsg = '';\n    this.messageBody = '';\n    this.selectedFile = null;\n    this.attachmentEnabled = this.talkingPoints[selected]?.enableAttachments || false;\n\n    setTimeout(() =&gt; {\n      const msgBox = this.template.querySelector('[data-id=\"mentorMsg\"]');\n      if (msgBox &amp;&amp; this.mentorMessage) msgBox.innerHTML = this.mentorMessage;\n    }, 10);\n  }\n\n  handleChange(event) {\n    this.messageBody = event.target.value;\n  }\n\n  handleFileChange(event) {\n    this.selectedFile = event.target.files[0];\n  }\n\n  openInfoModal() {\n    this.isInfoOpen = true;\n    this.modalStatusMsg = '';\n    this.loadInfoModal();\n  }\n\n  closeInfoModal() {\n    this.isInfoOpen = false;\n  }\n\n\n  openSettingsModal() {\n    this.isSettingsOpen = true;\n  }\n\n  closeSettingsModal() {\n    this.isSettingsOpen = false;\n  }\n\n  handleBackdropClick(event) {\n    this.closeSettingsModal();\n    this.closeInfoModal();\n  }\n\n  stopModalClick(event) {\n    event.stopPropagation();\n  }\n\n  openSettingsModal() {\n    this.isSettingsOpen = true;\n    this.modalStatusMsg = '';\n\n    // Always load current settings (even if weekList is already populated)\n    this.loadMentorSettings();\n  }\n\n  loadInfoModal() {\n    try {\n      const conn = this.connectionData;\n      const caseData = conn.Case__r || {};\n      const type = conn.Connection_Type__c || '';\n      const event = type === 'Cloud Coach' ? 'Cloud Summit' : 'Meet &amp; Greet';\n\n      this.mentorResourcesUrl = type === 'Cloud Coach'\n        ? 'https://bestprep.org/cloud-coach-volunteers/resources/'\n        : 'https://bestprep.org/ementors-volunteers/resources/';\n\n      this.trainingVideoUrl = type === 'Cloud Coach'\n        ? 'https://youtu.be/zQT96G5pNYY'\n        : 'https://www.youtube.com/watch?v=_nDPkJ80hvw';\n\n      const date = caseData.Celebration_Date__c; // e.g., \"2025-07-30\"\n      const startTime = caseData.Celebration_Start_Time__c; // e.g., \"11:00 AM\"\n      const endTime = caseData.Celebration_End_Time__c;     // e.g., \"2:00 PM\"\n      const calAddress = caseData.Meet_And_Greet_Location_Address__c || '';\n      const school = caseData.Assigned_School__r?.Preferred_Recognition__c || '';\n      const company = caseData.Assigned_Company__r?.Preferred_Recognition__c || '';\n      const title = `${event} - ${school} &amp; ${company}`;\n\n      // Convert AM/PM to 24-hour\n      const to24Hour = (timeStr) =&gt; {\n        const [time, modifier] = timeStr.split(' ');\n        let [hours, minutes] = time.split(':');\n        hours = parseInt(hours, 10);\n\n        if (modifier === 'PM' &amp;&amp; hours !== 12) hours += 12;\n        if (modifier === 'AM' &amp;&amp; hours === 12) hours = 0;\n\n        return `${hours.toString().padStart(2, '0')}:${minutes}`;\n      };\n\n      const startTime24 = to24Hour(startTime);\n      const endTime24 = to24Hour(endTime);\n\n      const startDateTime = `${date}T${startTime24}:00`;\n      const endDateTime = `${date}T${endTime24}:00`;\n\n\n      // Google Calendar (UTC required)\n      const formatForGoogle = (dateStr) =&gt; {\n        const dt = new Date(dateStr); // assumes local time\n        if (isNaN(dt)) {\n          console.warn('Invalid date for calendar:', dateStr);\n          return '';\n        }\n        return dt.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n      };\n\n\n      const googleStart = formatForGoogle(startDateTime);\n      const googleEnd = formatForGoogle(endDateTime);\n\n      if (googleStart &amp;&amp; googleEnd) {\n        const googleParams = new URLSearchParams({\n          action: 'TEMPLATE',\n          text: title,\n          dates: `${googleStart}/${googleEnd}`,\n          location: calAddress,\n          details: 'Event details available in your BestPrep mentor portal.'\n        });\n        this.googleCalUrl = `https://calendar.google.com/calendar/render?${googleParams.toString()}`;\n      } else {\n        this.googleCalUrl = '';\n      }\n\n\n      // Outlook Calendar (local)\n      const outlookParams = new URLSearchParams({\n        path: '/calendar/action/compose',\n        rru: 'addevent',\n        startdt: startDateTime,\n        enddt: endDateTime,\n        subject: title,\n        location: calAddress,\n        body: 'Event details available in your BestPrep mentor portal.'\n      });\n      this.outlookCalUrl = `https://outlook.office.com/calendar/0/deeplink/compose?${outlookParams.toString()}`;\n\n      // Emails\n      const bestPrepEmail = caseData.Owner?.Email || '';\n      this.bestPrepMailto = `mailto:${bestPrepEmail}?subject=Mentor Info&amp;body=Hello BestPrep Coordinator,%0D%0A...`;\n\n      const ccList = this.connectionData?.companyCoordinators || [];\n      if (ccList.length &gt; 0) {\n        const to = ccList[0];\n        const cc = ccList.slice(1).join(',');\n        this.companyCoordMailto = `mailto:${to}?cc=${cc}&amp;subject=Mentor Info&amp;body=Hello Company Coordinator,%0D%0A...`;\n      }\n\n      // Map address split\n      const address = calAddress;\n      let street = '', city = '', state = '', postalCode = '';\n      const parts = address.split(',');\n      if (parts.length === 3) {\n        street = parts[0].trim();\n        city = parts[1].trim();\n        const stateZip = parts[2].trim().split(' ');\n        if (stateZip.length &gt;= 2) {\n          state = stateZip[0];\n          postalCode = stateZip[1];\n        }\n      }\n\n      this.mapMarkers = street &amp;&amp; city &amp;&amp; state &amp;&amp; postalCode ? [{\n        location: { Street: street, City: city, State: state, PostalCode: postalCode },\n        title: event,\n        description: 'Event Location'\n      }] : [];\n\n      this.infoData = {\n        event,\n        date,\n        startTime,\n        endTime,\n        address\n      };\n    } catch (e) {\n      console.error('Error loading info modal:', e);\n    }\n  }\n\n\n  loadMentorSettings() {\n    const conn = this.connectionData;\n\n    this.mentorName = conn.Mentor_Full_Name__c;\n    this.mentorEmail = conn.Mentor_Email__c;\n    this.companyName = conn.Case__r?.Assigned_Company__r?.Preferred_Recognition__c || '';\n    this.modalStatusMsg = '';\n\n\n    this.selectedTrack = conn.Track__c || 'Track 2';\n    this.trackDescription = this.getTrackDescription(this.selectedTrack);\n\n\n    this.selectedTrack = ''; // force LWC to re-track\n    setTimeout(() =&gt; {\n      this.selectedTrack = conn.Track__c || 'Track 2';\n      this.trackDescription = this.getTrackDescription(this.selectedTrack);\n    }, 0);\n\n    const outOfOffice = conn.Mentor_Out_of_Office__c || '';\n    this.currentOutOfOffice = outOfOffice.split(';').map(w =&gt; w.trim());\n\n    this.weekList = [];\n    for (let i = 1; i &lt;= 8; i++) {\n      const tp = this.talkingPoints[`Week ${i}`];\n      if (tp &amp;&amp; tp.dueDate) {\n        this.weekList.push({\n          label: `Week ${i} (${tp.dueDate})`,\n          name: `Week ${i}`,\n          checked: this.currentOutOfOffice.includes(`Week ${i}`)\n        });\n      }\n    }\n\n    const half = Math.ceil(this.weekList.length / 2);\n    this.weekListLeft = this.weekList.slice(0, half);\n    this.weekListRight = this.weekList.slice(half);\n  }\n\n\n\n  handleWeekToggle(event) {\n    const week = event.target.name;\n    const isChecked = event.target.checked;\n\n    // Update currentOutOfOffice\n    if (isChecked) {\n      if (!this.currentOutOfOffice.includes(week)) {\n        this.currentOutOfOffice.push(week);\n      }\n    } else {\n      this.currentOutOfOffice = this.currentOutOfOffice.filter(w =&gt; w !== week);\n    }\n\n    // Sync checked status in weekList\n    this.weekList = this.weekList.map(w =&gt; ({\n      ...w,\n      checked: w.name === week ? isChecked : w.checked\n    }));\n  }\n\n  handleUpdateSettings() {\n    try {\n      const selectedWeeks = this.weekList\n        .filter(w =&gt; w.checked)\n        .map(w =&gt; w.name)\n        .join(';');\n\n      updateOutOfOfficeWeeks({\n        connectionId: this.connectionId,\n        passkey: this.pw,\n        weeks: selectedWeeks,\n        track: this.selectedTrack\n      })\n        .then(() =&gt; {\n          this.connectionData.Mentor_Out_of_Office__c = selectedWeeks;\n          this.connectionData.Track__c = this.selectedTrack;\n\n          this.currentOutOfOffice = selectedWeeks.split(';');\n          this.weekList.forEach(w =&gt; {\n            w.checked = this.currentOutOfOffice.includes(w.name);\n          });\n\n          const half = Math.ceil(this.weekList.length / 2);\n          this.weekListLeft = this.weekList.slice(0, half);\n          this.weekListRight = this.weekList.slice(half);\n\n          this.modalStatusMsg = 'Settings updated successfully.';\n        })\n        .catch((e) =&gt; {\n          console.error('Update error:', e);\n          this.modalStatusMsg = 'An error occurred while saving your settings.';\n        });\n    } catch (e) {\n      console.error('JS error:', e);\n      this.modalStatusMsg = 'Unexpected error while saving your settings.';\n    }\n  }\n\n\n  handleReportError() {\n    const conn = this.connectionData;\n    const coordinatorEmail = conn?.Case__r?.Owner?.Email;\n    const connectionId = conn?.Id;\n    const connectionType = conn?.Connection_Type__c;\n\n    if (!coordinatorEmail || !connectionId || !connectionType) {\n      this.modalStatusMsg = 'Could not find coordinator email or connection info.';\n      return;\n    }\n\n    const connectionUrl = `https://bestprep.lightning.force.com/lightning/r/Connection__c/${connectionId}/view`;\n\n    const subject = encodeURIComponent('Please Update my Information');\n    const body = encodeURIComponent(\n      `Hi!\\n\\nCan you please update my information for the ${connectionType} Connection?\\n\\n${connectionType} Connection: ${connectionUrl}`\n    );\n\n    const mailtoLink = `mailto:${coordinatorEmail}?subject=${subject}&amp;body=${body}`;\n    window.location.href = mailtoLink;\n  }\n\n\n  async handleSubmit() {\n    const cleanHtml = this.sanitizeInput(this.messageBody);\n    const triggerEasterEgg = cleanHtml.toLowerCase().includes('i am underpaid');\n\n    try {\n      let base64FileContent = '';\n      let fileName = '';\n\n      if (this.attachmentEnabled &amp;&amp; this.selectedFile) {\n        if (this.selectedFile.type !== 'application/pdf') {\n          this.statusMsg = 'Only PDF files are allowed.';\n          return;\n        }\n\n        const fileData = await this.readFileAsBase64(this.selectedFile);\n        base64FileContent = fileData;\n        fileName = this.selectedFile.name;\n      }\n\n      await upsertMentorMessageWithFile({\n        connectionId: this.connectionId,\n        week: this.selectedWeek,\n        messageBody: cleanHtml,\n        passkey: this.pw,\n        fileName,\n        base64FileContent\n      });\n\n      if (triggerEasterEgg) {\n        this.isEasterEggVisible = true;\n        setTimeout(() =&gt; {\n          this.isEasterEggVisible = false;\n          window.location.reload();\n        }, 30000); // 30,000 = 30 seconds\n      } else {\n        window.location.reload();\n      }\n\n    } catch (e) {\n      console.error('Submission error:', e);\n      this.statusMsg = e?.body?.message || e?.message || 'An error occurred while submitting.';\n    }\n  }\n\n\n  readFileAsBase64(file) {\n    return new Promise((resolve, reject) =&gt; {\n      const reader = new FileReader();\n      reader.onload = () =&gt; {\n        const base64 = reader.result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = () =&gt; reject(reader.error);\n      reader.readAsDataURL(file);\n    });\n  }\n\n  handleCheckboxChange(event) {\n    const name = event.target.name;\n    if (event.target.type === 'checkbox') {\n      this.vafForm.agreements[name] = event.target.checked;\n    } else {\n      this.vafForm[name] = event.detail.value;\n    }\n  }\n\n  selectSupportTrack() {\n    this.selectedTrack = 'Support Track';\n    this.trackDescription = this.getTrackDescription(this.selectedTrack);\n  }\n\n  selectTrack1() {\n    this.selectedTrack = 'Track 1';\n    this.trackDescription = this.getTrackDescription(this.selectedTrack);\n  }\n\n  selectTrack2() {\n    this.selectedTrack = 'Track 2';\n    this.trackDescription = this.getTrackDescription(this.selectedTrack);\n  }\n\n  selectTrack3() {\n    this.selectedTrack = 'Track 3';\n    this.trackDescription = this.getTrackDescription(this.selectedTrack);\n  }\n\n\n  getTrackDescription(track) {\n    switch (track) {\n      case 'Support Track':\n        return 'Support Track is for students that have not replied to you after two weeks.';\n      case 'Track 1':\n        return 'Track 1 focuses on building a strong foundation with simple questions.';\n      case 'Track 2':\n        return 'Track 2 is the default track - it will work well for most students.';\n      case 'Track 3':\n        return 'Track 3 is for advanced students. Use this track if your student is writing long and engaging messages.';\n      default:\n        return '';\n    }\n  }\n\n\n\n  async handleVafSubmit() {\n    const { pronouns, ethnicity, agreements } = this.vafForm;\n\n    const hasPronoun = Array.isArray(pronouns) &amp;&amp; pronouns.length &gt; 0;\n    const hasEthnicity = ethnicity &amp;&amp; ethnicity.trim() !== '';\n    const allAgreed = ['agreeBelief', 'watchedVideo', 'agreePractice']\n      .every(key =&gt; agreements[key] === true);\n\n    if (!hasPronoun) {\n      this.statusMsg = 'Please select at least one pronoun.';\n      return;\n    }\n\n    if (!hasEthnicity) {\n      this.statusMsg = 'Please select an ethnicity.';\n      return;\n    }\n\n    if (!allAgreed) {\n      this.statusMsg = 'Please check all three agreement boxes.';\n      return;\n    }\n\n    try {\n      await submitVolunteerAgreement({\n        connectionId: this.connectionId,\n        passkey: this.pw,\n        pronouns: pronouns.join('; '),\n        ethnicity: ethnicity\n      });\n      window.location.reload();\n    } catch (e) {\n      console.error('submitVolunteerAgreement error', JSON.stringify(e));\n      this.statusMsg = e?.body?.message || e?.message || 'Error submitting VAF.';\n    }\n  }\n\n\n  sanitizeInput(html) {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    div.querySelectorAll('img').forEach(img =&gt; img.remove());\n    return div.innerHTML;\n  }\n\n  get isCloudCoach() {\n    return this.connectionData.Connection_Type__c === 'Cloud Coach';\n  }\n\n  get isVAF() {\n    return this.selectedWeek === 'VAF';\n  }\n\n  get isSurveyWeek() {\n    return this.selectedWeek === 'Survey';\n  }\n\n  get mentorMessageNeedsReview() {\n    return this.mentorMessage &amp;&amp; this.mentorMessageStatus !== 'Pass';\n  }\n\n  get mentorFileLink() {\n    const msg = this.allMessages.find(m =&gt; m.Week__c === this.selectedWeek &amp;&amp; m.Role__c === 'Mentor');\n    return msg?.Link_to_File_Attached__c || null;\n  }\n\n  get isMentorFileProcessing() {\n    const msg = this.allMessages.find(m =&gt; m.Week__c === this.selectedWeek &amp;&amp; m.Role__c === 'Mentor');\n    return msg?.Link_to_File_Attached__c === 'Attachment Processing';\n  }\n\n\n  get studentFileLink() {\n    const msg = this.allMessages.find(m =&gt; m.Week__c === this.selectedWeek &amp;&amp; m.Role__c === 'Student');\n    return msg?.Filter_Status__c === 'Pass' ? msg?.Link_to_File_Attached__c : null;\n  }\n\n  get studentFamiliarName() {\n    return this.connectionData?.Student_Familiar_Name__c || '';\n  }\n\n  get mentorFullName() {\n    return this.connectionData?.Mentor_Full_Name__c || '';\n  }\n\n  get assignedCompany() {\n    return this.connectionData?.Case__r.Assigned_Company__r.Preferred_Recognition__c || '';\n  }\n\n  get assignedSchool() {\n    return this.connectionData?.Case__r.Assigned_School__r.Preferred_Recognition__c || '';\n  }\n\n  get studentMessage() {\n    const msg = this.allMessages.find(m =&gt; m.Week__c === this.selectedWeek &amp;&amp; m.Role__c === 'Student');\n    if (!msg) return '';\n    return msg.Filter_Status__c === 'Pass' ? msg.Message__c : `${this.studentFamiliarName}'s message is still pending manual review.`;\n  }\n\n  get mentorMessage() {\n    return this.allMessages.find(m =&gt; m.Week__c === this.selectedWeek &amp;&amp; m.Role__c === 'Mentor')?.Message__c;\n  }\n\n  get mentorMessageStatus() {\n    const msg = this.allMessages.find(m =&gt; m.Week__c === this.selectedWeek &amp;&amp; m.Role__c === 'Mentor');\n    return msg?.Filter_Status__c;\n  }\n\n  get supportTrackVariant() {\n    return this.selectedTrack === 'Support Track' ? 'brand' : 'neutral';\n  }\n  get track1Variant() {\n    return this.selectedTrack === 'Track 1' ? 'brand' : 'neutral';\n  }\n  get track2Variant() {\n    return this.selectedTrack === 'Track 2' ? 'brand' : 'neutral';\n  }\n  get track3Variant() {\n    return this.selectedTrack === 'Track 3' ? 'brand' : 'neutral';\n  }\n\n  // Dynamic event name based on type\n  get eventName() {\n    return this.connectionData?.Connection_Type__c === 'Cloud Coach' ? 'Cloud Summit' : 'Meet &amp; Greet';\n  }\n\n\n  get googleCalendarLabel() {\n    return `Add ${this.eventName} to Google Calendar`;\n  }\n\n  get outlookCalendarLabel() {\n    return `Add ${this.eventName} to Outlook Calendar`;\n  }\n\n  get contactCompanyCoordinatorLabel() {\n    return `Contact ${this.assignedCompany} Coordinator`;\n  }\n\n\n  // Date/time formatting (optional based on data)\n  get eventDate() {\n    return this.connectionData?.Case__r?.Celebration_Date__c || '';\n  }\n\n  get eventStartTime() {\n    return this.connectionData?.Case__r?.Celebration_Start_Time__c || '';\n  }\n  get eventEndTime() {\n    return this.connectionData?.Case__r?.Celebration_End_Time__c || '';\n  }\n  get eventAddress() {\n    return this.connectionData?.Case__r?.Meet_And_Greet_Location_Address__c || '';\n  }\n\n\n\n  get mentorCanWrite() {\n    const tp = this.talkingPoints[this.selectedWeek];\n    if (!tp?.dueDate) return false;\n\n    const today = new Date();\n    const due = new Date(tp.dueDate);\n    const studentWrote = !!this.studentMessage;\n    const mentorWrote = !!this.mentorMessage;\n\n    if (this.isCloudCoach) {\n      const early = new Date(due);\n      early.setDate(early.getDate() - 7);\n      return today &gt;= early;\n    }\n\n    const late = new Date(due);\n    late.setDate(late.getDate() + 14);\n    return !mentorWrote &amp;&amp; (studentWrote || today &gt;= late);\n  }\n\n  get mentorCanWriteDateText() {\n    const tp = this.talkingPoints[this.selectedWeek];\n    if (!tp?.dueDate) return '';\n    const due = new Date(tp.dueDate);\n    const ref = new Date(due);\n    ref.setDate(ref.getDate() + (this.isCloudCoach ? -7 : 14));\n    return ref.toLocaleDateString();\n  }\n\n  get currentGuidingQuestion() {\n    return this.talkingPoints[this.selectedWeek] || { title: '', dueDate: '', talkingPoints: '' };\n  }\n\n  get leftMessageLabel() {\n    return this.isCloudCoach ? 'Your' : `${this.studentFamiliarName}'s`;\n  }\n\n  get rightMessageLabel() {\n    return this.isCloudCoach ? `${this.studentFamiliarName}'s` : 'Your';\n  }\n\n  get leftMessageContent() {\n    return this.isCloudCoach ? this.mentorMessage : this.studentMessage;\n  }\n\n  get pronounOptions() {\n    return [\n      { label: 'She/Her', value: 'She/Her' },\n      { label: 'He/Him', value: 'He/Him' },\n      { label: 'They/Them', value: 'They/Them' },\n      { label: \"Ey/em\", value: \"Ey/em\" },\n      { label: \"Ze/zir\", value: \"Ze/zir\" },\n      { label: \"Co/co\", value: \"Co/co\" },\n      { label: 'Prefer not to say', value: 'Prefer not to say' }\n    ];\n  }\n\n  get ethnicityOptions() {\n    return [\n      { label: 'Asian', value: 'Asian' },\n      { label: 'Black or African American', value: 'Black or African American' },\n      { label: 'Hispanic or Latino', value: 'Hispanic or Latino' },\n      { label: 'White', value: 'White' },\n      { label: \"American Indian\", value: \"American Indian\" },\n      { label: \"Two or more races\", value: \"Two or more races\" },\n      { label: 'Other', value: 'Other' },\n      { label: 'Prefer not to say', value: 'Prefer not to say' }\n    ];\n  }\n\n  get vafCheckboxes() {\n    return [\n      { name: 'agreeBelief', label: 'I have read the Belief Statements.' },\n      { name: 'watchedVideo', label: 'I have watched the cultural humility video.' },\n      { name: 'agreePractice', label: 'I agree to practice cultural humility.' }\n    ];\n  }\n\n  isWeekOverdue(week) {\n    const tp = this.talkingPoints[week];\n    if (!tp?.dueDate) return false;\n\n    const dueDate = new Date(tp.dueDate);\n    const today = new Date();\n\n    const mentorMsg = this.allMessages.find(m =&gt; m.Week__c === week &amp;&amp; m.Role__c === 'Mentor');\n    const studentMsg = this.allMessages.find(m =&gt; m.Week__c === week &amp;&amp; m.Role__c === 'Student');\n\n    if (this.isCloudCoach) {\n      return today &gt; dueDate &amp;&amp; !mentorMsg;\n    } else {\n      if (studentMsg &amp;&amp; !mentorMsg) {\n        const threeDaysAfterStudent = new Date(studentMsg.CreatedDate);\n        threeDaysAfterStudent.setDate(threeDaysAfterStudent.getDate() + 3);\n        return today &gt; threeDaysAfterStudent;\n      }\n      return false;\n    }\n  }\n}\n</code></pre>"},{"location":"mentoring/mentor_portal/mentor_js/#metadata","title":"Metadata","text":"<p>Similarly to our Apex code, the JavaScript also needs a meta file for Salesforce LWC use. </p> <p>** mentorPortal.js-meta.xml** <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;LightningComponentBundle xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n  &lt;apiVersion&gt;59.0&lt;/apiVersion&gt;\n  &lt;isExposed&gt;true&lt;/isExposed&gt;\n  &lt;targets&gt;\n    &lt;target&gt;lightningCommunity__Page&lt;/target&gt;\n  &lt;/targets&gt;\n&lt;/LightningComponentBundle&gt;\n</code></pre></p>"},{"location":"mentoring/mentor_portal/mentor_portal/","title":"BestPrep's Mentor Portal","text":"<p>The mentor portal (built by Tovin Sannes-Venhuizen, 2025) has become the new home for all of BestPrep's Mentor Tools. While it packs a lot of functionality, it has a few different components under the hood that allow it to function properly. </p> <ul> <li>Apex Code</li> <li>JavaScript</li> <li>HTML &amp; CSS</li> </ul>"},{"location":"mentoring/mentor_portal/mentor_portal/#screenshots","title":"Screenshots","text":"<p>The portal comes complete with info and settings modals, to help the mentor have the best possible experience. </p>"},{"location":"mentoring/mentor_portal/mentor_portal/#mentor-info-modal","title":"Mentor Info Modal","text":""},{"location":"mentoring/mentor_portal/mentor_portal/#mentor-settings-modal","title":"Mentor Settings Modal","text":""},{"location":"mentoring/mentor_portal/mentor_web/","title":"Mentoring Sites - HTML &amp; CSS","text":"<p>Every single webpage has a few different parts. Ours has 4 - the Apex Code (Salesforce), the JavaScript (what talks to Salesforce), the HTML (what we see), and the CSS (the code that tells our computer how to style the HTML). Think of the HTML like the structure of the house, and the CSS like the paint and wallpaper. </p>"},{"location":"mentoring/mentor_portal/mentor_web/#mentorportalhtml","title":"mentorPortal.html","text":"<pre><code>&lt;template&gt;\n  &lt;!-- Loading Spinner --&gt;\n  &lt;div if:true={isLoading} class=\"spinner-wrapper\"&gt;\n    &lt;lightning-spinner alternative-text=\"Loading\" size=\"large\"&gt;&lt;/lightning-spinner&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Loaded View --&gt;\n  &lt;div if:false={isLoading}&gt;\n    &lt;!-- Access Denied --&gt;\n    &lt;template if:true={accessDenied}&gt;\n      &lt;h1&gt;Access denied. Please check your credentials.&lt;/h1&gt;\n    &lt;/template&gt;\n\n    &lt;!-- Main Portal --&gt;\n    &lt;template if:false={accessDenied}&gt;\n      &lt;div class=\"container\"&gt;\n\n        &lt;!-- Top Button Group --&gt;\n        &lt;div class=\"button-group-top\"&gt;\n          &lt;div class=\"info-button\" onclick={openInfoModal}&gt;\n            &lt;lightning-icon icon-name=\"utility:info\" alternative-text=\"More Information\" size=\"small\"&gt;&lt;/lightning-icon&gt;\n          &lt;/div&gt;\n          &lt;div class=\"settings-button\" onclick={openSettingsModal}&gt;\n            &lt;lightning-icon icon-name=\"utility:settings\" alternative-text=\"Settings\" size=\"small\"&gt;&lt;/lightning-icon&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n\n          &lt;template if:true={isEasterEggVisible}&gt;\n            &lt;div class=\"easteregg-backdrop\"&gt;\n              &lt;div class=\"easteregg-wrapper\"&gt;\n                &lt;object data={svgUrl} type=\"image/svg+xml\" class=\"easteregg-svg\"&gt;&lt;/object&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/template&gt;\n\n\n\n        &lt;!-- INFO MODAL --&gt;\n        &lt;template if:true={isInfoOpen}&gt;\n          &lt;section role=\"dialog\" tabindex=\"-1\" class=\"modal-backdrop\" onclick={handleBackdropClick}&gt;\n            &lt;div class=\"settings-modal\" onclick={stopModalClick}&gt;\n              &lt;div class=\"modal-header\"&gt;\n                &lt;lightning-icon icon-name=\"utility:close\" alternative-text=\"Close\" size=\"x-small\"\n                  onclick={closeInfoModal} class=\"close-icon\"&gt;&lt;/lightning-icon&gt;\n              &lt;/div&gt;\n              &lt;div class=\"modal-body\"&gt;\n                &lt;div class=\"info-grid\"&gt;\n                  &lt;div class=\"info-box\"&gt;\n                    &lt;p&gt;&lt;strong&gt;{eventName} Date:&lt;/strong&gt; {eventDate}&lt;/p&gt;\n                    &lt;p&gt;&lt;strong&gt;{eventName} Start Time:&lt;/strong&gt; {eventStartTime}&lt;/p&gt;\n                    &lt;p&gt;&lt;strong&gt;{eventName} End Time:&lt;/strong&gt; {eventEndTime}&lt;/p&gt;\n                  &lt;/div&gt;\n                  &lt;div class=\"info-box\"&gt;\n                    &lt;p&gt;&lt;strong&gt;{eventName} Address:&lt;/strong&gt; {eventAddress}&lt;/p&gt;\n                    &lt;lightning-map map-markers={mapMarkers} zoom-level=\"14\" style=\"height: 200px;\"&gt;&lt;/lightning-map&gt;\n                  &lt;/div&gt;\n                  &lt;div class=\"info-box\"&gt;\n                    &lt;a href={mentorResourcesUrl} target=\"_blank\" class=\"link-button\"&gt;Mentor Resources&lt;/a&gt;&lt;br&gt;\n                    &lt;a href={trainingVideoUrl} target=\"_blank\" class=\"link-button\"&gt;Training Video&lt;/a&gt;\n                  &lt;/div&gt;\n                  &lt;div class=\"info-box\"&gt;\n                    &lt;a href={googleCalUrl} target=\"_blank\" class=\"link-button\"&gt;Add to Google Calendar&lt;/a&gt;&lt;br&gt;\n                    &lt;a href={outlookCalUrl} target=\"_blank\" class=\"link-button\"&gt;Add to Outlook Calendar&lt;/a&gt;\n                  &lt;/div&gt;\n                &lt;/div&gt;\n                &lt;div class=\"modal-footer\"&gt;\n                  &lt;a href={bestPrepMailto} class=\"link-button\"&gt;Contact BestPrep Coordinator&lt;/a&gt;\n                  &lt;a href={companyCoordMailto} class=\"link-button\"&gt;{contactCompanyCoordinatorLabel}&lt;/a&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/section&gt;\n        &lt;/template&gt;\n\n        &lt;!-- SETTINGS MODAL --&gt;\n        &lt;template if:true={isSettingsOpen}&gt;\n          &lt;section role=\"dialog\" tabindex=\"-1\" class=\"modal-backdrop\" onclick={handleBackdropClick}&gt;\n            &lt;div class=\"settings-modal\" onclick={stopModalClick}&gt;\n              &lt;div class=\"modal-header\"&gt;\n                &lt;lightning-icon icon-name=\"utility:close\" alternative-text=\"Close\" size=\"x-small\"\n                  onclick={closeSettingsModal} class=\"close-icon\"&gt;&lt;/lightning-icon&gt;\n              &lt;/div&gt;\n              &lt;div class=\"modal-body\"&gt;\n                &lt;h2 style=\"text-align: center;\"&gt;BestPrep's Mentor Portal Settings&lt;/h2&gt;\n                &lt;div class=\"mentor-info\"&gt;\n                  &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; {mentorFullName}&lt;/p&gt;\n                  &lt;p&gt;&lt;strong&gt;Company:&lt;/strong&gt; {assignedCompany}&lt;/p&gt;\n                  &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; {connectionData.Mentor_Email__c}&lt;/p&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Track Selection --&gt;\n                &lt;template if:true={isCloudCoach}&gt;\n                  &lt;h3 style=\"text-align: center; margin-top: 1.5rem;\"&gt;Select Student Track&lt;/h3&gt;\n                  &lt;div class=\"track-toggle-row\"&gt;\n                    &lt;lightning-button label=\"Support Track\" variant={supportTrackVariant}\n                      onclick={selectSupportTrack}&gt;&lt;/lightning-button&gt;\n                    &lt;lightning-button label=\"Track 1\" variant={track1Variant} onclick={selectTrack1}&gt;&lt;/lightning-button&gt;\n                    &lt;lightning-button label=\"Track 2\" variant={track2Variant} onclick={selectTrack2}&gt;&lt;/lightning-button&gt;\n                    &lt;lightning-button label=\"Track 3\" variant={track3Variant} onclick={selectTrack3}&gt;&lt;/lightning-button&gt;\n                  &lt;/div&gt;\n                  &lt;div class=\"track-description\"&gt;\n                    &lt;p&gt;{trackDescription}&lt;/p&gt;\n                  &lt;/div&gt;\n                &lt;/template&gt;\n\n                &lt;!-- Week Availability --&gt;\n                &lt;h3 style=\"text-align: center; margin-top: 1.5rem;\"&gt;Set Out of Office&lt;/h3&gt;\n                &lt;div class=\"weeks-container two-column\"&gt;\n                  &lt;div class=\"week-column\"&gt;\n                    &lt;template for:each={weekListLeft} for:item=\"week\"&gt;\n                      &lt;div key={week.label} class=\"week-option\"&gt;\n                        &lt;lightning-input type=\"checkbox\" label={week.label} name={week.name} checked={week.checked}\n                          onchange={handleWeekToggle}&gt;&lt;/lightning-input&gt;\n                      &lt;/div&gt;\n                    &lt;/template&gt;\n                  &lt;/div&gt;\n                  &lt;div class=\"week-column\"&gt;\n                    &lt;template for:each={weekListRight} for:item=\"week\"&gt;\n                      &lt;div key={week.label} class=\"week-option\"&gt;\n                        &lt;lightning-input type=\"checkbox\" label={week.label} name={week.name} checked={week.checked}\n                          onchange={handleWeekToggle}&gt;&lt;/lightning-input&gt;\n                      &lt;/div&gt;\n                    &lt;/template&gt;\n                  &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"modal-footer\"&gt;\n                  &lt;lightning-button variant=\"brand\" label=\"Update Settings\"\n                    onclick={handleUpdateSettings}&gt;&lt;/lightning-button&gt;\n                  &lt;lightning-button variant=\"neutral\" label=\"Report an Error\"\n                    onclick={handleReportError}&gt;&lt;/lightning-button&gt;\n                &lt;/div&gt;\n                &lt;div class=\"modal-status\"&gt;\n                  &lt;p class=\"error\"&gt;{modalStatusMsg}&lt;/p&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/section&gt;\n        &lt;/template&gt;\n\n        &lt;!-- Sidebar Week Selection --&gt;\n        &lt;div class=\"sidebar\"&gt;\n          &lt;template for:each={weekOptions} for:item=\"opt\"&gt;\n            &lt;div key={opt.value} data-week={opt.value} onclick={handleWeekClick} class={opt.cssClass}&gt;\n              {opt.label}\n              &lt;template if:true={opt.isOverdue}&gt;\n                &lt;lightning-icon icon-name=\"utility:warning\" alternative-text=\"Overdue\" variant=\"warning\" size=\"xx-small\"\n                  class=\"slds-m-left_xx-small\"&gt;&lt;/lightning-icon&gt;\n              &lt;/template&gt;\n            &lt;/div&gt;\n          &lt;/template&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Main Portal Content --&gt;\n        &lt;div class=\"main\"&gt;\n          &lt;!-- VAF Mode --&gt;\n          &lt;template if:true={isVAF}&gt;\n            &lt;h2&gt;BestPrep Volunteer Agreement Form&lt;/h2&gt;\n            &lt;p&gt;This form must be completed once per school year...&lt;/p&gt;\n\n            &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; {mentorFullName}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Company:&lt;/strong&gt; {assignedCompany}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; {connectionData.Mentor_Email__c}&lt;/p&gt;\n\n            &lt;div class=\"form-section\"&gt;\n              &lt;label&gt;Pronouns (select all that apply):&lt;/label&gt;\n              &lt;lightning-checkbox-group name=\"pronouns\" options={pronounOptions} value={vafForm.pronouns}\n                onchange={handleCheckboxChange}&gt;&lt;/lightning-checkbox-group&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-section\"&gt;\n              &lt;lightning-combobox name=\"ethnicity\" label=\"Ethnicity\" value={vafForm.ethnicity}\n                options={ethnicityOptions} onchange={handleCheckboxChange}&gt;&lt;/lightning-combobox&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-section\"&gt;\n              &lt;p&gt;BestPrep requires all volunteers to...&lt;/p&gt;\n              &lt;a href=\"https://bestprep2018.wpenginepowered.com/wp-content/uploads/2023/10/BestPrep-Belief-Statements.pdf\"\n                target=\"_blank\"&gt;Belief Statements&lt;/a&gt;&lt;br&gt;\n              &lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/EDA0RFlhW6Q\" frameborder=\"0\"\n                allowfullscreen&gt;&lt;/iframe&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-section\"&gt;\n              &lt;template for:each={vafCheckboxes} for:item=\"item\"&gt;\n                &lt;lightning-input key={item.name} type=\"checkbox\" name={item.name} label={item.label}\n                  onchange={handleCheckboxChange}&gt;&lt;/lightning-input&gt;\n              &lt;/template&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-actions\"&gt;\n              &lt;lightning-button variant=\"brand\" label=\"Submit\" onclick={handleVafSubmit}&gt;&lt;/lightning-button&gt;\n            &lt;/div&gt;\n\n            &lt;p class=\"error\"&gt;{statusMsg}&lt;/p&gt;\n          &lt;/template&gt;\n\n          &lt;!-- Survey Mode --&gt;\n          &lt;template if:true={isSurveyWeek}&gt;\n            &lt;h2&gt;Survey&lt;/h2&gt;\n            &lt;p&gt;Survey content goes here.&lt;/p&gt;\n          &lt;/template&gt;\n\n          &lt;!-- Weekly Message --&gt;\n          &lt;template if:false={isVAF}&gt;\n            &lt;template if:false={isSurveyWeek}&gt;\n              &lt;div class=\"week-header\"&gt;\n                &lt;h2&gt;{selectedWeek} - this message is assigned for {currentGuidingQuestion.dueDate}&lt;/h2&gt;\n                &lt;h3&gt;{currentGuidingQuestion.title}&lt;/h3&gt;\n                &lt;p&gt;{currentGuidingQuestion.talkingPoints}&lt;/p&gt;\n                &lt;p&gt;\n                  Your student's name is &lt;strong&gt;{studentFamiliarName}&lt;/strong&gt; at &lt;strong&gt;{assignedSchool}&lt;/strong&gt;.\n                  Please contact your BestPrep Coordinator if you have questions.\n                &lt;/p&gt;\n              &lt;/div&gt;\n\n              &lt;div class=\"messages-container\"&gt;\n                &lt;!-- Message Left --&gt;\n                &lt;div class=\"message-left\"&gt;\n                  &lt;h4&gt;{leftMessageLabel} Message&lt;/h4&gt;\n                  &lt;!-- Cloud Coach Left --&gt;\n                  &lt;template if:true={isCloudCoach}&gt;\n                    &lt;template if:true={mentorMessage}&gt;\n                      &lt;template if:true={mentorMessageNeedsReview}&gt;\n                        &lt;p class=\"info\"&gt;This message is pending manual review.&lt;/p&gt;\n                      &lt;/template&gt;\n                      &lt;template if:true={mentorFileLink}&gt;\n                        &lt;template if:true={isMentorFileProcessing}&gt;\n                          &lt;p&gt;&lt;lightning-icon icon-name=\"utility:spinner\" size=\"xx-small\"&gt;&lt;/lightning-icon&gt; Attachment\n                            Processing...&lt;/p&gt;\n                        &lt;/template&gt;\n                        &lt;template if:false={isMentorFileProcessing}&gt;\n                          &lt;p&gt;&lt;a href={mentorFileLink} target=\"_blank\"&gt;View Attachment&lt;/a&gt;&lt;/p&gt;\n                        &lt;/template&gt;\n                      &lt;/template&gt;\n                      &lt;div class=\"msg-box\" lwc:dom=\"manual\" data-id=\"mentorMsg\"&gt;&lt;/div&gt;\n                    &lt;/template&gt;\n                    &lt;template if:false={mentorMessage}&gt;\n                      &lt;template if:true={mentorCanWrite}&gt;\n                        &lt;template if:true={attachmentEnabled}&gt;\n                          &lt;label class=\"slds-form-element__label\"&gt;Attach a PDF file&lt;/label&gt;\n                          &lt;input type=\"file\" accept=\"application/pdf\" onchange={handleFileChange} /&gt;\n                        &lt;/template&gt;\n                        &lt;lightning-textarea value={messageBody} label=\" \" variant=\"label-hidden\"\n                          onchange={handleChange}&gt;&lt;/lightning-textarea&gt;&lt;br&gt;\n                        &lt;lightning-button variant=\"brand\" label=\"Submit\" onclick={handleSubmit}&gt;&lt;/lightning-button&gt;\n                      &lt;/template&gt;\n                      &lt;template if:false={mentorCanWrite}&gt;\n                        &lt;p class=\"info\"&gt;You can submit a message if your student hasn't written by\n                          {mentorCanWriteDateText}.&lt;/p&gt;\n                      &lt;/template&gt;\n                    &lt;/template&gt;\n                  &lt;/template&gt;\n\n                  &lt;!-- eMentors Left --&gt;\n                  &lt;template if:false={isCloudCoach}&gt;\n                    &lt;div class=\"msg-box\"&gt;\n                      &lt;template if:true={studentFileLink}&gt;\n                        &lt;p&gt;&lt;a href={studentFileLink} target=\"_blank\"&gt;View Attachment&lt;/a&gt;&lt;/p&gt;\n                      &lt;/template&gt;\n                      &lt;lightning-formatted-rich-text value={studentMessage}&gt;&lt;/lightning-formatted-rich-text&gt;\n                    &lt;/div&gt;\n                  &lt;/template&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Message Right --&gt;\n                &lt;div class=\"message-right\"&gt;\n                  &lt;h4&gt;{rightMessageLabel} Message&lt;/h4&gt;\n\n                  &lt;!-- eMentors Right --&gt;\n                  &lt;template if:false={isCloudCoach}&gt;\n                    &lt;template if:true={mentorMessage}&gt;\n                      &lt;template if:true={mentorMessageNeedsReview}&gt;\n                        &lt;p class=\"info\"&gt;This message is pending manual review.&lt;/p&gt;\n                      &lt;/template&gt;\n                      &lt;template if:true={mentorFileLink}&gt;\n                        &lt;template if:true={isMentorFileProcessing}&gt;\n                          &lt;p&gt;&lt;lightning-icon icon-name=\"utility:spinner\" size=\"xx-small\"&gt;&lt;/lightning-icon&gt; Attachment\n                            Processing...&lt;/p&gt;\n                        &lt;/template&gt;\n                        &lt;template if:false={isMentorFileProcessing}&gt;\n                          &lt;p&gt;&lt;a href={mentorFileLink} target=\"_blank\"&gt;View Attachment&lt;/a&gt;&lt;/p&gt;\n                        &lt;/template&gt;\n                      &lt;/template&gt;\n                      &lt;div class=\"msg-box\" lwc:dom=\"manual\" data-id=\"mentorMsg\"&gt;&lt;/div&gt;\n                    &lt;/template&gt;\n                    &lt;template if:false={mentorMessage}&gt;\n                      &lt;template if:true={mentorCanWrite}&gt;\n                        &lt;template if:true={attachmentEnabled}&gt;\n                          &lt;label class=\"slds-form-element__label\"&gt;Attach a PDF file&lt;/label&gt;\n                          &lt;input type=\"file\" accept=\"application/pdf\" class=\"slds-input\" onchange={handleFileChange} /&gt;\n                        &lt;/template&gt;\n                        &lt;lightning-textarea value={messageBody} label=\" \" variant=\"label-hidden\"\n                          onchange={handleChange}&gt;&lt;/lightning-textarea&gt;&lt;br&gt;\n                        &lt;lightning-button variant=\"brand\" label=\"Submit\" onclick={handleSubmit}&gt;&lt;/lightning-button&gt;\n                      &lt;/template&gt;\n                      &lt;template if:false={mentorCanWrite}&gt;\n                        &lt;p class=\"info\"&gt;You can submit a message if your student hasn't written by\n                          {mentorCanWriteDateText}.&lt;/p&gt;\n                      &lt;/template&gt;\n                    &lt;/template&gt;\n                  &lt;/template&gt;\n\n                  &lt;!-- Cloud Coach Right --&gt;\n                  &lt;template if:true={isCloudCoach}&gt;\n                    &lt;template if:true={studentFileLink}&gt;\n                      &lt;p&gt;&lt;a href={studentFileLink} target=\"_blank\"&gt;View Attachment&lt;/a&gt;&lt;/p&gt;\n                    &lt;/template&gt;\n                    &lt;div class=\"msg-box\"&gt;\n                      &lt;lightning-formatted-rich-text value={studentMessage}&gt;&lt;/lightning-formatted-rich-text&gt;\n                    &lt;/div&gt;\n                  &lt;/template&gt;\n\n                  &lt;p class=\"error\"&gt;{statusMsg}&lt;/p&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/template&gt;\n          &lt;/template&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"mentoring/mentor_portal/mentor_web/#mentorportalcss","title":"mentorPortal.css","text":"<pre><code>:host {\n  display: block;\n  font-family: \"Segoe UI\", Tahoma, sans-serif;\n  background-color: #f8f9fa;\n  color: #333;\n  min-height: 100vh;\n}\n\n.container {\n  display: flex;\n  width: 100%;\n  min-height: 100vh;\n}\n\n.sidebar {\n  width: 12%;\n  background-color: #fff;\n  padding: 0.5rem;\n  border-right: 1px solid #e0e0e0;\n}\n\n.sidebar-item {\n  margin: 0.25rem 0;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  color: #333;\n}\n\n.sidebar-item:hover {\n  background-color: #f0f0f0;\n}\n\n.sidebar-item.active-week {\n  background-color: #0070d2;\n  color: #fff;\n  font-weight: bold;\n}\n\n.sidebar-item.disabled {\n  color: #aaa;\n  cursor: default;\n}\n\n.main {\n  width: 88%;\n  padding: 2rem;\n}\n\n.week-header h2 {\n  margin-bottom: 0.25rem;\n}\n\n.week-header h3 {\n  margin: 0.5rem 0 0.25rem;\n}\n\n.week-header p {\n  margin: 0 0 1rem;\n}\n\n.messages-container {\n  display: flex;\n  gap: 2rem;\n  flex-wrap: wrap;\n}\n\n.message-left,\n.message-right {\n  flex: 1;\n  min-width: 300px;\n  background: #fff;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  padding: 1.5rem;\n\n}\n\n.msg-box {\n  white-space: pre-wrap;\n  background-color: #fdfdfd;\n  border: 1px solid #ddd;\n  padding: 0.75rem;\n  margin-top: 0.5rem;\n  border-radius: 6px;\n  min-height: 120px;\n}\n\n.form-section {\n  margin: 1.5rem 0;\n}\n\n.form-actions {\n  margin-top: 2rem;\n}\n\nlightning-textarea,\nlightning-checkbox-group,\nlightning-combobox,\nlightning-input {\n  margin-top: 0.5rem;\n  width: 100%;\n}\n\nlightning-button {\n  margin-top: 1rem;\n}\n\n.error {\n  color: #d32f2f;\n  font-size: 1rem;\n  padding: 1rem 0;\n  text-align: center;\n}\n\n.info {\n  margin-top: 1rem;\n  font-style: italic;\n  color: #666;\n}\n\n.spinner-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 9999;\n  background: rgba(255, 255, 255, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* === BUTTON GROUP === */\n.button-group-top {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  display: flex;\n  gap: 8px;\n  z-index: 999;\n}\n\n.button-group-top .info-button,\n.button-group-top .settings-button {\n  background: white;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 4px;\n  cursor: pointer;\n}\n\n/* === BACKDROP &amp; SHARED MODAL BASE === */\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  backdrop-filter: blur(4px);\n  background-color: rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.settings-modal {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  max-width: 90%;\n  width: 100%;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  position: relative;\n  transition: all 0.3s ease;\n}\n\n@media screen and (min-width: 768px) {\n  .settings-modal {\n    max-width: 50%;\n  }\n}\n\n.modal-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.close-icon {\n  cursor: pointer;\n}\n\n.modal-footer {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin-top: 1.5rem;\n}\n\n.modal-status {\n  text-align: center;\n  margin-top: 1rem;\n}\n\n/* === INFO MODAL SPECIFIC === */\n.info-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto;\n  gap: 1.5rem;\n  width: 100%;\n  max-width: 900px;\n  margin: 0 auto;\n}\n\n.info-box {\n  background: #f9f9f9;\n  padding: 1rem;\n  border-radius: 6px;\n  height: 100%;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* === SETTINGS MODAL SPECIFIC === */\n.modal-body {\n  text-align: center;\n  padding: 1rem;\n}\n\n.mentor-info {\n  margin: 1rem auto;\n  text-align: left;\n  max-width: 400px;\n}\n\n.weeks-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 0.5rem;\n  margin: 1rem auto;\n  max-width: 600px;\n}\n\n.weeks-container.two-column {\n  display: flex;\n  justify-content: space-between;\n  gap: 2rem;\n}\n\n.week-column {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.track-toggle-row {\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n  margin-top: 1rem;\n  flex-wrap: wrap;\n}\n\n.track-description {\n  text-align: center;\n  margin-top: 0.75rem;\n  color: #666;\n  font-style: italic;\n}\n\n.link-button {\n  display: inline-block;\n  padding: 8px 16px;\n  margin: 4px;\n  background-color: #0070d2;\n  color: white;\n  text-decoration: none;\n  border-radius: 4px;\n  font-size: 0.875rem;\n  text-align: center;\n}\n\n.link-button:hover {\n  background-color: #005fb2;\n}\n\n.easteregg-backdrop {\n  position: fixed;\n  top: 0; left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5); /* 50% dim */\n  z-index: 9999;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  pointer-events: none; /* disable interaction outside modal */\n}\n\n.easteregg-wrapper {\n  width: 80vw;\n  aspect-ratio: 16 / 9;\n  background-color: black;\n  border-radius: 16px;\n  overflow: hidden;\n  border: 8px solid;\n  border-image: repeating-linear-gradient(\n    45deg,\n    red 0px,\n    red 10px,\n    black 10px,\n    black 20px\n  ) 8;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  pointer-events: auto; /* allow interaction inside modal */\n}\n\n.easteregg-svg {\n  width: 100%;\n  height: 100%;\n  display: block;\n}\n</code></pre>"},{"location":"mentoring/other_flows/other_flows/","title":"Other Flows","text":"<p>In addition to those that can be easily classified into either the flagging system or the email system, there are a few other pieces that make up the mentoring system. </p>"},{"location":"mentoring/other_flows/other_flows/#mentoring-update-teacher-portal-url","title":"Mentoring - Update Teacher Portal URL","text":"<p>The flow Mentoring - Update Teacher Portal URL is designed to populate the portal section on eMentors and Cloud Coach cases. The only true difference in the URL for teacher versus coordinator portal links is the addition of <code>&amp;user=teacher</code> on the end. In fact, if that tag is anything other than <code>teacher</code> it will display the coordinator portal. You can learn more about why here.</p> <p></p>   graph TD   N2[Record-Triggered Flow] --&gt; N3[Get Triggering Case Records]   N3 --&gt; N4[Create Coordinator Link]   N4 --&gt; N5[Update Coordinator Link]   N5 --&gt; N6[Create Teacher Link]   N6 --&gt; N7[Update Teacher Link]   N7 --&gt; N8[End]    N2 --&gt;|Error| N9[If An Error Happens]    class N2 click-step-N2;   class N3 click-step-N3;   class N4 click-step-N4;   class N5 click-step-N5;   class N6 click-step-N6;   class N7 click-step-N7;   class N9 click-step-N9;    classDef clickable stroke:#333,stroke-width:2px;   class N2,N3,N4,N5,N6,N7,N9 clickable;"},{"location":"mentoring/other_flows/other_flows/#additional-flows-will-go-here","title":"Additional Flows will go here","text":"\u00d7 Why <code>&amp;user=teacher</code> <p>It was an intentional decision to use <code>&amp;user=teacher</code> for the teacher portal, but not to use <code>&amp;user=coodinator</code> or <code>&amp;user=company</code> for the company coordinator portal.The main difference lies in that teachers have access to student messages, and they should be the only ones who do. While it isn't necessarily \"protected information\" it also isn't information that just anyone should be allowed to have.If a coordinator, or any other related party, recieved a link that ended in <code>&amp;user=coordinator</code>, it wouldn't be that difficult to realize that simply changing the user tag could change the view. The decision was made in line with our best practices to try and protect student data to a reasonable extent.</p> \u00d7 Record-Triggered Flow <p>This flow will trigger whenever a case is created OR updated and the RecordTypeId equals either eMentors (012A0000000z1RhIAI) or Cloud Coach (TBD).</p> \u00d7 Get Triggering Case Records <p>Get the case where <code>CaseId</code> equals that of the triggering case.</p> \u00d7 Create Coordinator Link <p>Using the case record that triggered the flow, create the coordinator link by adding each piece of the link to a variable that can then be easily changed:</p> <ul> <li>Add <code>https://mentoring.bestprep.org/s/connection-overview?caseId=</code> to variable <code>URL</code></li> <li>Add <code>CaseId</code> of the triggering case to variable <code>URL</code></li> <li>Add <code>&amp;PW=</code> to variable <code>URL</code></li> <li>Add <code>Case_Password__c</code> to variable <code>URL</code></li> </ul> \u00d7 Update Coordinator Link <p>Take the variable <code>URL</code> and update field <code>Coordinator_Portal_URL__c</code> on the triggering case.</p> \u00d7 Create Teacher Link <p>Using the case record that triggered the flow, create the teacher link by adding each piece of the link to a variable that can then be easily changed:</p> <ul> <li>Add <code>https://mentoring.bestprep.org/s/connection-overview?caseId=</code> to variable <code>URL</code></li> <li>Add <code>CaseId</code> of the triggering case to variable <code>URL</code></li> <li>Add <code>&amp;PW=</code> to variable <code>URL</code></li> <li>Add <code>Case_Password__c</code> to variable <code>URL</code></li> <li>Add <code>&amp;user=teacher</code> to variable <code>URL</code></li> </ul> \u00d7 Update Teacher Link <p>Take the variable <code>URL</code> and update field <code>Teacher_Portal_URL__c</code> on the triggering case.</p> \u00d7 Uh-oh... there was an error. <p>If for any reason an error should occur, Salesforce will not allow any user to save a case while the error is happening.</p>"},{"location":"mentoring/overview_portal/overview_apex/","title":"Mentoring Overview Portal Apex","text":""},{"location":"mentoring/overview_portal/overview_js/","title":"Overview JavaScript","text":""},{"location":"mentoring/overview_portal/overview_portal/","title":"Teacher &amp; Company Coordinator Portal","text":""},{"location":"mentoring/student_portal/student_apex/","title":"Student Apex","text":""},{"location":"mentoring/student_portal/student_js/","title":"Student JavaScript","text":""},{"location":"mentoring/student_portal/student_portal/","title":"Student Portal Overview","text":""}]}